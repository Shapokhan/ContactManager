{"version":3,"sources":["Context.js","components/contact/Contact.js","components/contact/Contacts.js","components/layout/Header.js","components/pages/About.js","components/pages/NotFound.js","components/layout/TextInputGroup.js","components/contact/AddContact.js","components/contact/EditContact.js","components/Test/Test.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","reducer","state","action","type","contacts","filter","contact","id","payload","map","Provider","dispatch","setState","axios","get","res","this","data","value","props","children","Component","Consumer","Contact","showContactInfo","onShowClick","e","onDeleteClick","a","delete","name","email","phone","className","onClick","style","cursor","bind","color","float","to","Contacts","Fragment","key","Header","branding","href","defaultProps","match","params","NotFound","TextInputGroup","label","placeholder","onChange","error","htmlFor","classnames","AddContact","errors","onSubmit","preventDefault","newContact","post","history","push","target","EditContact","updContact","put","Test","title","body","fetch","then","response","json","App","exact","path","component","About","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.50641c97.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport axios from 'axios'\n\nconst Context = React.createContext();\nconst reducer = (state, action)=>{\nswitch (action.type ) {\n    case 'DELETE_CONTACT':\n        return {\n            ...state,\n            contacts : state.contacts.filter(contact =>contact.id !== action.payload\n            )\n        };\n    case 'ADD_CONTACT':\n        return {\n            ...state,\n            contacts: [action.payload, ...state.contacts]\n        };\n    case 'UPDATE_CONTACT':\n    return {\n        ...state,\n        contacts: state.contacts.map(contact=>contact.id === action.payload.id ? (contact = action.payload) :  contact )\n    } \n\n    default:\n        return state;\n}\n}\n\nexport class Provider extends Component{\n    state = {\n        contacts: [],\n        dispatch: action => this.setState(state => reducer(state,action))\n        \n    }\n   async componentDidMount(){\n     const res = await axios.get('https://jsonplaceholder.typicode.com/users')\n     this.setState({\n         contacts:res.data\n     })\n    }\n    render(){\n        return ( \n        <Context.Provider value={this.state}>\n            {this.props.children}\n        </Context.Provider>\n        )\n    }\n\n}\n\nexport const Consumer = Context.Consumer;","import React, { Component } from 'react'\nimport PropType from 'prop-types'\nimport { Consumer } from '../../Context'\nimport axios from 'axios'\nimport {Link} from 'react-router-dom'\nclass Contact extends Component {\n\n    state = {\n        showContactInfo: false\n    }\n    onShowClick = e => {\n        this.setState({\n            showContactInfo: !this.state.showContactInfo\n        })\n    }\n    onDeleteClick = async (id,dispatch) => {\n      await axios.delete(`https://jsonplaceholder.typicode.com/users/${id}`)\n\n      dispatch({type:'DELETE_CONTACT', payload:id})\n        \n    }\n    render() {\n        const { id, name, email, phone } = this.props.contact\n        const { showContactInfo } = this.state;\n        return (\n            \n            <Consumer>\n               \n                {value => {\n                    const {dispatch} = value;\n                    return (\n                        \n                        <div className=\"card card-body mb-3\">\n                            <h4>{name}\n                                <i onClick={this.onShowClick} className=\"fa fa-sort-down\" style={{ cursor: 'pointer' }}></i>\n                                <i onClick={this.onDeleteClick.bind(this,id,dispatch)} className=\"fa fa-times\" style={{ cursor: 'pointer', color: 'red', float: 'right' }}></i>\n                                <Link to={`contact/edit/${id}`}>\n                                    <i className=\"fa fa-pencil mx-2\" style={{ cursor: 'pointer', color: 'black', float: 'right' }}>\n\n                                    </i>\n                                </Link>\n                            </h4>\n                            {\n                                showContactInfo ? (<ul className=\"list-group\">\n                                    <li className=\"list-group-item\">Email : {email}</li>\n                                    <li className=\"list-group-item\">Phone: {phone}</li>\n                                </ul>) : null\n                            }\n                        </div>\n                    )\n                }}\n            </Consumer>\n\n        )\n    }\n}\nContact.propTypes = {\n    contact: PropType.object.isRequired,\n\n}\nexport default Contact;","import React, { Component } from 'react'\nimport { Consumer } from '../../Context'\nimport Contact from './Contact'\n\nexport default class Contacts extends Component {\n\n\n\n    render() {\n        return (\n            <Consumer>\n                {value => {\n                    return (\n                        <React.Fragment>\n                            <h1 className=\"display-4 mb-3\">\n                            <span className=\"text-danger\">Contact </span>List\n                            </h1>\n                            {value.contacts.map(contact => (\n                                <Contact\n                                    key={contact.id}\n                                    contact={contact}\n                                />\n                            ))}\n                        </React.Fragment>\n                    )\n                }}\n            </Consumer>\n        )\n\n    }\n}\n","import React from 'react'\nimport PropType from 'prop-types'\nimport {Link} from 'react-router-dom'\n\nconst Header = (props) => {\n    const {branding} = props;\n    return (\n        <nav className=\"navbar navbar-expand-sm bg-danger navbar-dark mb-3 py-0\">\n            <div className=\"container\">\n            <a href=\"/\" className=\"navbar-brand\">{branding}</a>\n            <div>\n                <ul className=\"navbar-nav mr-auto\">\n                    <li className=\"nav-item\">\n                        <Link to=\"/\" className=\"nav-link\">\n                            <i className=\"fa fa-home\"/>\n                            Home\n                            </Link>\n                        </li>\n                    <li className=\"nav-item\">\n                        <Link to=\"/contact/add\" className=\"nav-link\">\n                        <i className=\"fa fa-plus\"/>\n                        Add Contact\n                        </Link>\n                        </li>\n                    <li className=\"nav-item\">\n                        <Link to=\"/about\" className=\"nav-link\">\n                        <i className=\"fa fa-question\"/>\n                            About\n                            </Link>\n                            </li>\n                </ul>\n            </div>\n            </div>\n        </nav>\n    )\n}\nHeader.defaultProps = {\nbranding:'My App'\n}\nHeader.propTypes = {\n    branding: PropType.string.isRequired\n}\nexport default Header;","import React from 'react'\n\nexport default props => {\n    return (\n        <div>\n            <h1 className=\"display-4\">\n                {props.match.params.id}\n                About Contact Manager\n            </h1>\n        </div>\n    )\n}\n","import React from 'react'\n\nfunction NotFound() {\n    return (\n        <div>\n            <h1 className=\"display-4 text-danger\">404 Page not found</h1>\n            <p className=\"lead\">Sorry this page is not found</p>\n        </div>\n    )\n}\nexport default NotFound;","import React from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\n\nconst TextInputGroup = ({ label, name, value, placeholder, type, onChange, error }) => {\n    return (\n        <div className=\"form-group\">\n            <label htmlFor={name} >{label}</label>\n            <input type={type}\n                className={classnames('form-control form-control-lg', {\n                    'is-invalid':error\n                })}\n                placeholder={placeholder}\n                name={name}\n                value={value}\n                onChange={onChange}\n            />\n            {error && <div className=\"invalid-feedback\">{error}</div>}\n        </div>\n    )\n}\nTextInputGroup.propTypes ={\nname: PropTypes.string.isRequired,\nlabel: PropTypes.string.isRequired,\nplaceholder: PropTypes.string.isRequired,\nvalue: PropTypes.string.isRequired,\ntype: PropTypes.string.isRequired,\nonChange: PropTypes.func.isRequired\n\n}\nTextInputGroup.defaultProps = {\n    type: 'text'\n}\nexport default TextInputGroup","import React, { Component } from 'react'\nimport { Consumer } from '../../Context'\nimport TextInputGroup from '../layout/TextInputGroup'\nimport axios from 'axios'\n\nclass AddContact extends Component {\n    state={\n        name:'', \n        email:'',\n        phone:'',\n        errors:{}\n    }\n  \n    onSubmit = async (dispatch, e) => {\n       \n        e.preventDefault();\n        const {name,email,phone} = this.state;\n        if(name === ''){\n            this.setState({\n                errors :{\n                    name:'Name is required'\n                }\n                \n            })\n            return;\n        }\n        if(email === ''){\n            this.setState({\n                errors :{\n                    email:'Email is required'\n                }\n            })\n            return;\n        }\n        if(phone === ''){\n            this.setState({\n                errors :{\n                    phone:'Phone is required'\n                }\n            })\n            return;\n        }\n\n        const newContact = {\n            name,\n            email,\n            phone\n        }\n  const res = await axios.post('https://jsonplaceholder.typicode.com/users', newContact)\n       dispatch({type:'ADD_CONTACT', payload:res.data})\n        \n        this.setState({name:'', email:'', phone:'', errors:{}})\n        this.props.history.push('/')\n    }\n    onChange = e => this.setState({[e.target.name]:e.target.value})\n    \n    render() {\n        const {name,email,phone, errors} = this.state;\n        return(\n            <Consumer>\n                {value => {\n                    const {dispatch} = value;\n                    return(\n                        <div className=\"card mb-3\">\n                        <div className=\"card-header\">\n                        Add Contact\n                        </div>\n                        <div className=\"card-body\">\n                            <form onSubmit={this.onSubmit.bind(this,dispatch)}>\n                               \n                               <TextInputGroup\n                               label=\"Name\"\n                               type=\"text\"\n                               name=\"name\"\n                               placeholder=\"Enter Your Name\"\n                               value={name}\n                               onChange={this.onChange}\n                                error={errors.name}\n                               />\n                                <TextInputGroup\n                               label=\"Email\"\n                               name=\"email\"\n                               type=\"email\"\n                               placeholder=\"Enter Your Email\"\n                               value={email}\n                               onChange={this.onChange}\n                               error={errors.email}\n\n                               />\n                               <TextInputGroup\n                               label=\"Phone Number\"\n                               type=\"text\"\n                               name=\"phone\"\n                               placeholder=\"Enter Your Phone Number\"\n                               value={phone}\n                               onChange={this.onChange}\n                               error={errors.phone}\n                               />\n                                <input type=\"submit\" className=\"btn btn-block btn-success\" value=\"Add Contact\"/>\n        \n                            </form>\n                        </div>\n                    </div>\n                    )\n                }}\n            </Consumer>\n        )\n        \n    }\n}\n\nexport default AddContact;","import React, { Component } from 'react'\nimport { Consumer } from '../../Context'\nimport TextInputGroup from '../layout/TextInputGroup'\nimport axios from 'axios'\nimport Contact from './Contact'\n\nclass EditContact extends Component {\n    state={\n        name:'', \n        email:'',\n        phone:'',\n        errors:{}\n    }\n    async componentDidMount()\n    {\n        const {id} = this.props.match.params;\n        const res = await axios.get(`https://jsonplaceholder.typicode.com/users/${id}`)\n        const contact = res.data;\n        this.setState({\n            name: contact.name,\n            email:contact.email,\n            phone:contact.phone\n        })\n    }\n  \n    onSubmit = async (dispatch, e) => {\n       \n        e.preventDefault();\n        const {name,email,phone} = this.state;\n        if(name === ''){\n            this.setState({\n                errors :{\n                    name:'Name is required'\n                }\n                \n            })\n            return;\n        }\n        if(email === ''){\n            this.setState({\n                errors :{\n                    email:'Email is required'\n                }\n            })\n            return;\n        }\n        if(phone === ''){\n            this.setState({\n                errors :{\n                    phone:'Phone is required'\n                }\n            })\n            return;\n        }\n\n        const updContact = {\n            name:name,\n            email:email,\n            phone:phone\n        }\n        const {id} = this.props.match.params;\n       const res = await axios.put(`https://jsonplaceholder.typicode.com/users/${id}`, updContact)\n        dispatch({type:'UPDATE_CONTACT', payload:res.data})\n        this.setState(\n            {\n                name:'', \n                email:'', \n                phone:'', \n                errors:{}\n            })\n        this.props.history.push('/')\n    }\n    onChange = e => this.setState({[e.target.name]:e.target.value})\n    \n    render() {\n        const {name,email,phone, errors} = this.state;\n        return(\n            <Consumer>\n                {value => {\n                    const {dispatch} = value;\n                    return(\n                        <div className=\"card mb-3\">\n                        <div className=\"card-header\">\n                        Edit Contact\n                        </div>\n                        <div className=\"card-body\">\n                            <form onSubmit={this.onSubmit.bind(this,dispatch)}>\n                               \n                               <TextInputGroup\n                               label=\"Name\"\n                               type=\"text\"\n                               name=\"name\"\n                               placeholder=\"Enter Your Name\"\n                               value={name}\n                               onChange={this.onChange}\n                                error={errors.name}\n                               />\n                                <TextInputGroup\n                               label=\"Email\"\n                               name=\"email\"\n                               type=\"email\"\n                               placeholder=\"Enter Your Email\"\n                               value={email}\n                               onChange={this.onChange}\n                               error={errors.email}\n\n                               />\n                               <TextInputGroup\n                               label=\"Phone Number\"\n                               type=\"text\"\n                               name=\"phone\"\n                               placeholder=\"Enter Your Phone Number\"\n                               value={phone}\n                               onChange={this.onChange}\n                               error={errors.phone}\n                               />\n                                <input type=\"submit\" className=\"btn btn-block btn-success\" value=\"Update Contact\"/>\n        \n                            </form>\n                        </div>\n                    </div>\n                    )\n                }}\n            </Consumer>\n        )\n        \n    }\n}\n\nexport default EditContact;","import React from 'react'\nclass Test extends React.Component {\n    state = {\n        title:'',\n        body:''\n    }\n    componentDidMount(){\n        fetch('https://jsonplaceholder.typicode.com/posts/1')\n  .then(response => response.json())\n  .then(data => this.setState({\n      title:data.title,\n      body:data.body\n  }))\n    }\n    render(){\n        const {title, body} = this.state;\n        return(\n            <div>\n                Title: {title}\n                Body: {body}\n            </div>\n        )\n    }\n}\nexport default Test","import React from 'react';\nimport { Provider } from './Context'\nimport {HashRouter as Router, Route, Switch } from 'react-router-dom'\nimport Contacts from './components/contact/Contacts'\nimport Header from './components/layout/Header'\nimport About from './components/pages/About'\nimport NotFound from './components/pages/NotFound'\nimport AddContact from './components/contact/AddContact'\nimport EditContact from './components/contact/EditContact'\nimport Test from './components/Test/Test'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport 'font-awesome/css/font-awesome.min.css'\n\nfunction App() {\n  return (\n    <Provider>\n      <Router>\n      <div className=\"App\">\n        <Header branding=\"Contact Manager\" />\n        <div className=\"container\">\n          <Switch>\n            <Route exact path =\"/\" component={Contacts}/>\n            <Route exact path =\"/about/:id\" component={About}/>\n            <Route exact path =\"/contact/add\" component={AddContact}/>\n            <Route exact path =\"/contact/edit/:id\" component={EditContact}/>\n            <Route exact path =\"/test\" component={Test}/>\n            <Route component={NotFound}/>\n          </Switch>\n        </div>\n      </div>\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}